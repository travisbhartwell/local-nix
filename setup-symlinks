#!/run/current-system/sw/bin/bash

readonly PROGNAME=$(basename "$0")
readonly NIXOS_CONFIG_DIR=/etc/nixos
readonly NIXPKGS_CONFIG_DIR="${HOME}"/.nixpkgs
readonly PROJECT_DIR=$(git rev-parse --show-toplevel)
readonly HOSTNAME=$(hostname)
readonly USESUDO=1

create_symlink_if_needed() {
    local readonly target=$1; shift
    local readonly linkname=$1; shift

    # Default
    local usesudo=0
    [ $# -gt 0 ] && usesudo=$1

    local actual_target
    actual_target=$(readlink -en "${linkname}")

    # Symlink is what it should be
    [ "${target}" == "${actual_target}" ] &&
        return 0

    # Otherwise, create it
    echo "Creating/updating symlink to ${target}"
    if [ "$USESUDO" -eq "$usesudo" ]; then
        sudo ln -snb --suffix=".backup" "${target}" "${linkname}"
    else
        ln -snb --suffix=".backup" "${target}" "${linkname}"
    fi
}

main() {
    # This can be called as different hooks.
    # It needs to act slightly differently when used for post-rewrite:
    [ "${PROGNAME}" == "post-rewrite" ] &&
        [ "$1" != "rebase" ] &&
        exit 0

    # Check parameters for validity
    [ -z "${HOSTNAME}" ] &&
        echo "No HOSTNAME found!" 2>&1 &&
        exit 1

    [ ! -e "${PROJECT_DIR}/machines/${HOSTNAME}.nix" ] &&
        echo "No machine specific configuration found!" 2>&1 &&
        exit 1

    # Create symlinks for common subdirectory
    create_symlink_if_needed \
        "${PROJECT_DIR}"/common \
        "${NIXOS_CONFIG_DIR}"/common \
        $USESUDO

    # Create symlink for machine specific configuration to configuration.nix
    create_symlink_if_needed \
        "${PROJECT_DIR}"/machines/"${HOSTNAME}".nix \
        "${NIXOS_CONFIG_DIR}"/configuration.nix \
        $USESUDO

    # Create symlink for nixpkgs directory
    # First create the nixpkgs directory, if needed
    [ ! -d "${NIXPKGS_CONFIG_DIR}" ] && mkdir -p "${NIXPKGS_CONFIG_DIR}"

    create_symlink_if_needed \
        "${PROJECT_DIR}"/nixpkgs/config.nix \
        "${NIXPKGS_CONFIG_DIR}"/config.nix
}

main "$@"
